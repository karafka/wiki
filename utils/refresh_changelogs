#!/usr/bin/env ruby

# Script that downloads the dynamic changelogs for Karafka components

require 'fileutils'

# Configuration for changelog sources
CHANGELOGS = {
  'Karafka' => "https://raw.githubusercontent.com/karafka/karafka/master/CHANGELOG.md",
  'WaterDrop' => "https://raw.githubusercontent.com/karafka/waterdrop/master/CHANGELOG.md",
  'Karafka-Web-UI' => "https://raw.githubusercontent.com/karafka/karafka-web/master/CHANGELOG.md",
  'Karafka-Testing' => "https://raw.githubusercontent.com/karafka/karafka-testing/master/CHANGELOG.md",
  'Karafka-Core' => "https://raw.githubusercontent.com/karafka/karafka-core/master/CHANGELOG.md",
  'Karafka-Rdkafka' => "https://raw.githubusercontent.com/karafka/karafka-rdkafka/master/CHANGELOG.md",
  'Rdkafka' => "https://raw.githubusercontent.com/karafka/rdkafka-ruby/master/CHANGELOG.md"
}

# Default output directory - can be overridden via command line
DEFAULT_OUTPUT_DIR = '.'

class ChangelogFetcher
  def initialize(output_dir = DEFAULT_OUTPUT_DIR)
    @output_dir = output_dir
    ensure_output_directory
  end

  def fetch_all
    puts "Fetching changelogs to #{@output_dir}..."

    CHANGELOGS.each do |name, url|
      fetch_changelog(name, url)
    end

    puts "Done! Fetched #{CHANGELOGS.size} changelogs."
  end

  private

  def ensure_output_directory
    FileUtils.mkdir_p(@output_dir) unless Dir.exist?(@output_dir)
    FileUtils.mkdir_p(File.join(@output_dir, 'Changelog')) unless Dir.exist?(File.join(@output_dir, 'Changelog'))
  end

  def fetch_changelog(name, url)
    output_file = File.join(@output_dir, "Changelog", "#{name}.md")

    puts "Fetching #{name} changelog..."

    system("curl -H 'Accept-Encoding: deflate' -o '#{output_file}' '#{url}'")

    if $?.success?
      add_auto_generated_comment(output_file)
      puts "  ✓ Saved to #{output_file}"
    else
      puts "  ✗ Failed to fetch #{name} changelog"
    end
  end

  def add_auto_generated_comment(file_path)
    # Read the original content
    original_content = File.read(file_path, encoding: 'utf-8')

    # Add the comment at the top
    commented_content = <<~COMMENT
[//]: # (This file is auto-generated by bin/refresh_changelogs)
[//]: # (Do not edit manually - changes will be overwritten)

#{original_content}
COMMENT
    # Write back to the file with explicit encoding
    File.write(file_path, commented_content, encoding: 'utf-8')
  end
end

# Script execution
if __FILE__ == $0
  output_dir = ARGV[0] || DEFAULT_OUTPUT_DIR

  fetcher = ChangelogFetcher.new(output_dir)
  fetcher.fetch_all
end
