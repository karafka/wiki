#!/usr/bin/env ruby
# frozen_string_literal: true

require 'find'
require 'tmpdir'
require 'fileutils'

class KarafkaTestDocGenerator
  def initialize(
    output_file = 'Development-Integration-Tests-Catalog.md',
    karafka_repo_url = 'https://github.com/karafka/karafka.git'
  )
    @output_file = output_file
    @karafka_repo_url = karafka_repo_url
    @temp_dir = nil
    @spec_dir = nil
  end

  def generate
    clone_karafka_repo
    test_files = collect_test_files
    test_data = extract_descriptions(test_files)
    generate_markdown(test_data)

    puts "Generated documentation for #{test_data.length} test files"
    puts "Output saved to: #{@output_file}"
  ensure
    cleanup_temp_repo
  end

  private

  def clone_karafka_repo
    puts "Cloning Karafka repository..."
    @temp_dir = Dir.mktmpdir('karafka_clone')

    # Clone with shallow depth for faster download
    system("git clone --depth 1 #{@karafka_repo_url} #{@temp_dir}", out: File::NULL, err: File::NULL)

    unless $?.success?
      raise "Failed to clone Karafka repository from #{@karafka_repo_url}"
    end

    @spec_dir = File.join(@temp_dir, 'spec', 'integrations')

    unless Dir.exist?(@spec_dir)
      raise "Integration specs directory not found at #{@spec_dir}"
    end

    puts "Repository cloned to: #{@temp_dir}"
    puts "Spec directory: #{@spec_dir}"
  end

  def cleanup_temp_repo
    if @temp_dir && Dir.exist?(@temp_dir)
      puts "Cleaning up temporary repository..."
      FileUtils.rm_rf(@temp_dir)
      puts "Cleanup completed."
    end
  end

  def collect_test_files
    files = []

    Find.find(@spec_dir) do |path|
      if File.file?(path) && path.end_with?('_spec.rb')
        files << path
      end
    end

    files.sort
  end

  def extract_descriptions(files)
    test_data = []

    files.each do |file_path|
      description = extract_description_from_file(file_path)
      relative_path = file_path.sub(/^#{Regexp.escape(@spec_dir)}\/?/, '')

      test_data << {
        file_path: relative_path,
        full_path: file_path,
        description: description
      }
    end

    test_data
  end

  def extract_description_from_file(file_path)
    return "File not found" unless File.exist?(file_path)

    lines = File.readlines(file_path)
    description_lines = []
    found_frozen_string = false
    collecting_comments = false

    lines.each do |line|
      stripped_line = line.strip

      # Skip the frozen_string_literal comment
      if stripped_line.include?('frozen_string_literal')
        found_frozen_string = true
        next
      end

      # Skip empty lines before we start collecting comments
      if found_frozen_string && stripped_line.empty? && !collecting_comments
        next
      end

      # If we hit a comment line
      if stripped_line.start_with?('#')
        comment_text = stripped_line.sub(/^#+\s*/, '').strip

        # Skip Karafka Pro license comments
        if is_license_comment?(comment_text)
          next
        end

        # Start collecting functional comments (non-license, non-empty)
        if !comment_text.empty?
          collecting_comments = true
          description_lines << comment_text
        end
      elsif stripped_line.empty? && collecting_comments
        # Allow empty lines between comment blocks while collecting
        next
      elsif !stripped_line.empty?
        # If we hit a non-empty, non-comment line, we're done with the description
        break
      end
    end

    if description_lines.empty?
      "No description available"
    else
      description_lines.join(' ')
    end
  end

  def is_license_comment?(comment_text)
    license_keywords = [
      'This code is part of Karafka Pro',
      'commercial component not licensed under LGPL',
      'See LICENSE for details',
      'Karafka Pro',
      'LICENSE for details'
    ]

    license_keywords.any? { |keyword| comment_text.include?(keyword) }
  end

  def generate_markdown(test_data)
    markdown_content = build_markdown_content(test_data)

    File.write(@output_file, markdown_content)
  end

  def build_markdown_content(test_data)
    <<~MARKDOWN
[//]: # (This file is auto-generated by bin/refresh_librdkafka)
[//]: # (Do not edit manually - changes will be overwritten)

# Karafka Integration Tests Catalog

<style>
  .md-grid {
    max-width: 100%;
  }
</style>

!!! info "Auto-Generated Documentation"
    This catalog is automatically generated from the Karafka repository's integration test suite.

    It provides an overview of all integration tests and their purposes to help developers understand the framework's testing coverage and find relevant test examples.

!!! warning "Karafka Framework Integration Tests Only"
    This catalog exclusively covers **Karafka framework integration tests** and does not include tests from other components in the ecosystem such as:

    - **karafka-rdkafka** (Ruby bindings for librdkafka)
    - **WaterDrop** (Kafka producer library)
    - **Karafka Web UI** (monitoring and management interface)
    - **Other supporting libraries**

    Each component maintains its own separate test suite with different testing approaches and structures.
    This page serves as a **Karafka-specific reference** to help developers understand the framework's capabilities, use cases, and edge case handling through real integration scenarios.

    These integration tests are particularly valuable because they demonstrate **user-facing APIs and workflows** rather than internal implementation details, making them excellent examples for understanding how to work with Karafka in practice.
    For comprehensive testing documentation of other components, please refer to their respective repositories and documentation.

| File Path | Description |
|-----------|-------------|
#{generate_table_rows(test_data)}
    MARKDOWN
  end

  def generate_table_rows(test_data)
    test_data.map do |test|
      description = test[:description] == "No description available" ? "*No description available*" : test[:description]
      "| `#{escape_markdown(test[:file_path])}` | #{escape_markdown(description)} |"
    end.join("\n")
  end

  def escape_markdown(text)
    text.to_s
        .gsub('|', '\\|')
        .gsub('!', '\\!')
  end
end

# Usage
if __FILE__ == $0
  # You can customize the output file and repo URL
  output_file = ARGV[0] || 'Development/Karafka-Integration-Tests-Catalog.md'
  karafka_repo_url = ARGV[1] || 'https://github.com/karafka/karafka.git'

  puts "Output file: #{output_file}"
  puts "Repository URL: #{karafka_repo_url}"
  puts

  begin
    generator = KarafkaTestDocGenerator.new(output_file, karafka_repo_url)
    generator.generate
  rescue => e
    puts "Error: #{e.message}"
    exit 1
  end
end
