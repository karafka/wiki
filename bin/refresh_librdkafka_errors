#!/usr/bin/env ruby

# Generates librdkafka errors documentation dynamically

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'karafka-rdkafka'
end

require 'fileutils'
require 'rdkafka'

# Default output directory - can be overridden via command line
DEFAULT_OUTPUT_DIR = '.'

class LibrdkafkaErrorsGenerator
  def initialize(output_dir = DEFAULT_OUTPUT_DIR)
    @output_dir = output_dir
    ensure_output_directory
  end

  def generate
    puts "Generating librdkafka errors documentation..."

    begin
      content = build_markdown_content
      output_file = File.join(@output_dir, 'Librdkafka', 'Errors.md')

      File.write(output_file, content)
      puts "  ✓ Saved to #{output_file}"
    rescue => e
      puts "  ✗ Failed to generate librdkafka errors: #{e.message}"
    end
  end

  private

  def ensure_output_directory
    FileUtils.mkdir_p(@output_dir) unless Dir.exist?(@output_dir)
    FileUtils.mkdir_p(File.join(@output_dir, 'Librdkafka')) unless Dir.exist?(File.join(@output_dir, 'Librdkafka'))
  end

  def build_markdown_content
    content = build_header
    content += build_local_errors_section
    content += build_broker_errors_section
    content
  end

  def build_header
    <<~MARKDOWN
[//]: # (This file is auto-generated by bin/build_librdkafka_errors)
[//]: # (Do not edit manually - changes will be overwritten)

<style>
  .md-grid {
    max-width: 100%;
  }
</style>

# Librdkafka Errors

!!! Info "Handling Non-Permanent and Permanent Errors from librdkafka"

    Most errors from `librdkafka` are non-permanent and are gracefully managed by internal retries, reducing the immediate impact on your application. These errors are generally not critical and often involve temporary issues such as a `timed_out` error, which indicates a delay in response or operation but does not necessarily signify a permanent problem. Those types of errors, while reported, usually resolve themselves through subsequent retries without requiring direct intervention.

    Karafka also incorporates several recovery mechanisms that enable it to automatically reconnect and continue operations whenever possible, further enhancing the robustness of your message-handling processes.

## Errors Classification

Internal errors (`RD_KAFKA_RESP_ERR__`) in librdkafka originate within the client library. They are often labeled as "Local" issues. In contrast, the Kafka broker generates broker errors (`RD_KAFKA_RESP_ERR_`). They are typically referred to as "Broker" issues, indicating problems on the server side.

Understanding whether an error is internal or from a broker is crucial for troubleshooting and resolving issues effectively:

- **Debugging**: Knowing the error's source helps debug. If the error is internal, the issue must be resolved within the client environment (e.g., fixing configuration and updating the client library for bugs). If the error is from the broker, it might involve server configuration, network policies, or other aspects managed by the Kafka infrastructure.

- **Scalability and Reliability**: By properly handling these errors, developers and operators can ensure the creation of more robust and scalable client applications. For instance, internal errors might require code changes or updates, while broker errors could lead to changes in how the client interacts with the Kafka ecosystem.

- **Operational Awareness**: For operators and developers, the categorization of errors provides valuable insights into the health and status of both the Kafka client and the server, fostering informed operational decisions and monitoring strategies.

By categorizing errors this way, librdkafka provides a more straightforward interface for developers to handle, log, and react to various conditions affecting their applications' interaction with Apache Kafka.

    MARKDOWN
  end

  def build_local_errors_section
    content = <<~MARKDOWN
## Local Errors

Internal errors originate within the librdkafka client itself. They are not generated by interactions with the Kafka broker. Still, they are caused by issues within the client's processes and operations.

These errors are prefixed with two underscores (`__`) in their full error code names.

<table border='1'>

  <tr>
    <th>Code</th>
    <th>Symbol</th>
    <th>Name</th>
    <th>Description</th>
  </tr>

    MARKDOWN

    local_errors = get_errors_by_type('Local')
    local_errors.each do |error|
      content += build_table_row(error)
    end

    content += "</table>\n\n"
    content
  end

  def build_broker_errors_section
    content = <<~MARKDOWN
## Broker Errors

Broker errors are those reported by the Kafka broker to the librdkafka client. These errors arise from the server side of Kafka operations and are relayed back to the client during normal communication.

These errors are prefixed with a single underscore (`_`) in their error code names.

<table border='1'>

  <tr>
    <th>Code</th>
    <th>Symbol</th>
    <th>Name</th>
    <th>Description</th>
  </tr>

    MARKDOWN

    broker_errors = get_errors_by_type('Broker')
    broker_errors.each do |error|
      content += build_table_row(error)
    end

    content += "</table>\n"
    content
  end

  def get_errors_by_type(type)
    errors_hash = Rdkafka::Admin.describe_errors
    filtered_errors = []

    errors_hash.each do |key, value|
      next unless value[:description].start_with?(type)

      filtered_errors << {
        code: value[:code],
        symbol: format_symbol(value[:name]),
        name: "RD_KAFKA_RESP_ERR_#{value[:name]}",
        description: value[:description]
      }
    end

    # Sort by code for consistent ordering
    filtered_errors.sort_by { |error| error[:code] }
  end

  def format_symbol(name)
    # Remove leading underscore if present and convert to lowercase
    symbol = name[0] == '_' ? name[1..-1] : name
    ":#{symbol.downcase}"
  end

  def build_table_row(error)
    <<~ROW
<tr><td><code>#{error[:code]}</code></td><td><code>#{error[:symbol]}</code></td><td><code>#{error[:name]}</code></td><td>#{error[:description]}</td></tr>
    ROW
  end
end

# Script execution
if __FILE__ == $0
  output_dir = ARGV[0] || DEFAULT_OUTPUT_DIR

  generator = LibrdkafkaErrorsGenerator.new(output_dir)
  generator.generate
end
