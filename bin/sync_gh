#!/usr/bin/env ruby

# Script that makes sure, that the GH wiki header info is present in all the files.
# Builds that and pushes the update to GH.

require 'fileutils'

FailedCommand = Class.new(StandardError)

def system!(cmd)
  system(cmd) || raise(FailedCommand)
end

raise ArgumentError, 'GH wiki version missing' unless File.exist?("#{Dir.pwd}/.gh")

Dir["#{Dir.pwd}/**.md"].each do |file|
  basename = File.basename(file)
  target = "#{Dir.pwd}/.gh/#{basename}"

  FileUtils.cp(file, target)
end

%w[
  Pro
  Web-UI
  WaterDrop
  Upgrades
  Operations
].each do |namespace|
  # Find all markdown files in the namespace, including those in subdirectories
  Dir["#{Dir.pwd}/#{namespace}/**/*.md"].each do |file|
    relative_path = file.sub("#{Dir.pwd}/#{namespace}/", "")

    path_parts = relative_path.split(File::SEPARATOR)
    target_basename = path_parts.join("-")

    target = "#{Dir.pwd}/.gh/#{namespace}-#{target_basename}"

    FileUtils.cp(file, target)
    puts "Copied #{file} to #{target}" # Optional logging
  end
end

Dir["Pro/Web-UI/**.md"].each do |file|
  basename = File.basename(file)
  target = "#{Dir.pwd}/.gh/Pro-Web-UI-#{basename}"

  FileUtils.cp(file, target)
end

# Move this to root without a namespace.
# In this case namespace is used only as a organization layer
%w[
  Advanced
].each do |namespace|
  Dir["#{Dir.pwd}/#{namespace}/**.md"].each do |file|
    basename = File.basename(file)
    target = "#{Dir.pwd}/.gh/#{basename}"

    FileUtils.cp(file, target)
  end
end

HEADER_TEMPLATE_CONTENT = IO.read("#{Dir.pwd}/.gh/_GH_Header.md")

Dir["#{Dir.pwd}/.gh/**.md"].each do |file|
  basename = File.basename(file)

  next if basename.start_with?('_')

  rd = IO.read(file)

  name = basename[0..-4]
  target_name = name == 'Home' ? '' : name

  IO.write file, HEADER_TEMPLATE_CONTENT.gsub('PAGE_NAME', target_name) + "\n" + rd
end

system!('cd .gh/ && git add ./')
system('cd .gh/ && git commit -m "docs update"')
system!('cd .gh/ && git push origin master')
